/* ========================================================================
 * Copyright 2014 miso4204
 *
 * Licensed under the MIT, The MIT License (MIT)
 * Copyright (c) 2014 miso4204

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 * ========================================================================


Source generated by CrudMaker version 1.0.0.qualifier

*/

package co.edu.uniandes.csw.miso4204.score.persistence;

import co.edu.uniandes.csw.miso4204.score.logic.dto.ScoreDTO;
import co.edu.uniandes.csw.miso4204.score.logic.dto.ScorePageDTO;
import co.edu.uniandes.csw.miso4204.score.persistence.converter.ScoreConverter;
import co.edu.uniandes.csw.miso4204.score.persistence.entity.ScoreEntity;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import org.apache.shiro.SecurityUtils;

public class ScorePersistence extends _ScorePersistence{

        private EntityManagerFactory emf;
        
	public ScorePersistence(){
		emf = Persistence.createEntityManagerFactory("ScorePU");
		
	}
    public void getEntityManager() {
        co.edu.uniandes.csw.miso4204.security.logic.dto.UserDTO usrDto = (co.edu.uniandes.csw.miso4204.security.logic.dto.UserDTO) SecurityUtils.getSubject().getPrincipal();
        String tenant = usrDto.getTenantID();
        Map<String, Object> emProperties = new HashMap<String, Object>();
        emProperties.put("eclipselink.tenant-id", tenant);//Asigna un valor al multitenant
        entityManager = emf.createEntityManager(emProperties);
    }
        
        @Override
	public ScoreDTO createScore(ScoreDTO score) {
            
            ScoreDTO dto;
            try {
                getEntityManager();
                dto = super.createScore(score);
            } catch (Exception e) {
                e.printStackTrace();
                dto = null;
            } finally {
                if (entityManager.isOpen()) {
                    entityManager.close();
                }
            }
            return dto;
	}
	
        @Override
	@SuppressWarnings("unchecked")
	public List<ScoreDTO> getScores() {
            
            List<ScoreDTO> dtos;
            try {
                getEntityManager();
                dtos = super.getScores();
            } catch (Exception e) {
                e.printStackTrace();
                dtos = null;
            } finally {
                if (entityManager.isOpen()) {
                    entityManager.close();
                }
            }
            return dtos;
	}

        @Override
	@SuppressWarnings("unchecked")
	public ScorePageDTO getScores(Integer page, Integer maxRecords) {

            ScorePageDTO dtos;
            try {
                getEntityManager();
                dtos = super.getScores(page, maxRecords);
            } catch (Exception e) {
                e.printStackTrace();
                dtos = null;
            } finally {
                if (entityManager.isOpen()) {
                    entityManager.close();
                }
            }
            return dtos;
	}

        @Override
	public ScoreDTO getScore(Long id) {

            ScoreDTO dto;
            try {
                getEntityManager();
                dto = super.getScore(id);
            } catch (Exception e) {
                e.printStackTrace();
                dto = null;
            } finally {
                if (entityManager.isOpen()) {
                    entityManager.close();
                }
            }
            return dto;
	}

        @Override
	public void deleteScore(Long id) {

            try {
                getEntityManager();
                super.deleteScore(id);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (entityManager.isOpen()) {
                    entityManager.close();
                }
            }
	}

        @Override
	public void updateScore(ScoreDTO detail) {
            try {
                getEntityManager();
                super.updateScore(detail);
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                if (entityManager.isOpen()) {
                    entityManager.close();
                }
            }
	}
        
        @Override
	public ScorePageDTO getProductScores(Long productId) {
            
            ScorePageDTO dtos;
            try {
                getEntityManager();
                dtos = super.getProductScores(productId);
            } catch (Exception e) {
                e.printStackTrace();
                dtos = null;
            } finally {
                if (entityManager.isOpen()) {
                    entityManager.close();
                }
            }
            return dtos;
	}

}